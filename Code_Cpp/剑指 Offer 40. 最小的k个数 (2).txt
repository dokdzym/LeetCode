class Solution {
    int partition(vector<int>& nums, int l, int r) {
        if(l > r) return -1;
        int i = l, j = r + 1;
        int key = nums[l];
        while(true){
            while(nums[++i] <= key)
                if(i == r)
                    break;
            while(nums[--j] >= key)
                if(j == l)
                    break;
            if(i >= j) break;
            swap(nums[i], nums[j]);
        }
        swap(nums[j], nums[l]);
        return j;
    }
    // 基于随机的划分
    int randomized_partition(vector<int>& nums, int l, int r) {
        int i = rand() % (r - l + 1) + l;
        swap(nums[r], nums[i]);
        return partition(nums, l, r);
    }
    void randomized_selected(vector<int>& arr, int l, int r, int k) {
        if (l >= r) return;
        int pos = randomized_partition(arr, l, r);
        int num = pos - l + 1;
        if (k == num) return;
        else if (k < num) randomized_selected(arr, l, pos - 1, k);
        else randomized_selected(arr, pos + 1, r, k - num);   
    }
public:
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        srand((unsigned)time(NULL));
        randomized_selected(arr, 0, (int)arr.size() - 1, k);
        vector<int>vec;
        for (int i = 0; i < k; ++i) vec.push_back(arr[i]);
        return vec;
    }
};