class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(-1);
        ListNode* head = res;
        while(l1 && l2)
        {
            if(l1 -> val < l2 -> val)
            {
                res -> next = l1;
                l1 = l1 ->next;
            }
            else
            {
                res -> next = l2;
                l2 = l2 ->next;
            }
            res = res -> next;
        }
        res -> next = l1 ? l1 : l2;
        return head -> next;
    }
};

//以上是迭代做法


class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        if(l1 -> val < l2 -> val)
        {
            ListNode* res = l1;
            res -> next = mergeTwoLists(l1 -> next, l2);
            return res;
        }
        else
        {
            ListNode* res = l2;
            res -> next = mergeTwoLists(l1, l2 -> next);
            return res;
        }
            
    }
};

//以上是递归做法