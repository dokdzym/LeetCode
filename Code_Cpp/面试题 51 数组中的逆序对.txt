class Solution {
public:
    int helper(vector<int>& nums, vector<int>& tmp, int l, int r)
    {
        if(l >= r)
            return 0;
        int m = (l + r) >> 1;
        int inverse_count = helper(nums, tmp, l, m) + helper(nums, tmp, m + 1, r);
        int i = l, j = m + 1, pos = l;
        while(i <= m && j <= r)
        {
            if(nums[i] <= nums[j])
            {
                tmp[pos] = nums[i];//较小的放入数组
                inverse_count += j - (m + 1);
                i ++;
            }
            else
            {
                tmp[pos] = nums[j];//同上
                j ++;
            }
            ++ pos;
        }
        for(int k = i; k <= m; ++ k)
        {
            tmp[pos ++] = nums[k];//较小的放入数组
            inverse_count += j - (m + 1);
        }
        for(int k = j; k <= r; ++ k)
            tmp[pos ++] = nums[k];//较小的放入数组
        copy(tmp.begin() + l, tmp.begin() + r + 1, nums.begin() + l);
        return inverse_count;
    }
    int reversePairs(vector<int>& nums) {
        int len = nums.size();
        if(len <= 1)
            return 0;
        vector<int> tmp(len);
        return helper(nums, tmp, 0, len - 1);
    }
};