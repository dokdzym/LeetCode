/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
public:
    Node* pre = nullptr;
    Node* first;
    Node* treeToDoublyList(Node* root) {
        if(root == nullptr) return nullptr;
        dfs(root);
        //pre是先序遍历的最后一个节点，head是先序的第一个节点
        pre -> right = first;
        first -> left = pre;
        return first;
    }
    void dfs(Node* root){
        if(root == nullptr) return ;
        dfs(root -> left);
        if(pre != nullptr) pre -> right = root;
        else first = root;
        root -> left = pre;
        pre = root; 
        dfs(root -> right);
    }
};