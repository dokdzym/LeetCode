//用了两种方法，方法1是快速选择，方法2是基于堆排序的选择
//方法1：快速选择
class Solution {
public:
int partition(vector<int>& nums, int left, int right){
    int i = left;
    int j = right + 1;
    int key = nums[left];
    while(true){
        while(nums[++ i] <= key)
            if(i == right)
                break;
        while(nums[-- j] >= key)
            if(j == left)
                break;
        if(i >= j) break;
        swap(nums[i], nums[j]);
    }
    swap(nums[j], nums[left]);
    return j;
}

int quickSort(vector<int>& nums, int left, int right, int k){
    if(left == right) return nums[left];
    int randomPos = rand() % (right - left + 1) + left;
    swap(nums[randomPos], nums[left]);
    int pivot = partition(nums, left, right);
    if(pivot == k) 
        return nums[k];
    else{
        return pivot < k ? quickSort(nums, pivot + 1, right, k) : quickSort(nums, left, pivot - 1, k);
    }
}
    int findKthLargest(vector<int>& nums, int k) {
        srand(time(NULL));
        if(nums.size() == 1) return nums[0];
        return quickSort(nums, 0, nums.size() - 1, nums.size() - k);
    }
};
//方法2：基于堆排序的选择
class Solution {
public:
    void maxHeapify(vector<int>& a, int i, int heapSize) {
        int l = i * 2 + 1, r = i * 2 + 2, largest = i;
        if (l < heapSize && a[l] > a[largest]) {
            largest = l;
        } 
        if (r < heapSize && a[r] > a[largest]) {
            largest = r;
        }
        if (largest != i) {
            swap(a[i], a[largest]);
            maxHeapify(a, largest, heapSize);
        }
    }

    void buildMaxHeap(vector<int>& a, int heapSize) {
        for (int i = heapSize / 2; i >= 0; --i) {
            maxHeapify(a, i, heapSize);
        } 
    }

    int findKthLargest(vector<int>& nums, int k) {
        int heapSize = nums.size();
        buildMaxHeap(nums, heapSize);
        for (int i = nums.size() - 1; i >= nums.size() - k + 1; --i) {
            swap(nums[0], nums[i]);
            --heapSize;
            maxHeapify(nums, 0, heapSize);
        }
        return nums[0];
    }
};
